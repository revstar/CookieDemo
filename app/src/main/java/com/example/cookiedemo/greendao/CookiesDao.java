package com.example.cookiedemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cookiedemo.bean.Cookies;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "cookies".
*/
public class CookiesDao extends AbstractDao<Cookies, Void> {

    public static final String TABLENAME = "cookies";

    /**
     * Properties of entity Cookies.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Host_key = new Property(0, String.class, "host_key", false, "host_key");
        public final static Property Name = new Property(1, String.class, "name", false, "name");
        public final static Property Value = new Property(2, String.class, "value", false, "value");
        public final static Property Path = new Property(3, String.class, "path", false, "path");
        public final static Property Expires_utc = new Property(4, Long.class, "expires_utc", false, "expires_utc");
    }


    public CookiesDao(DaoConfig config) {
        super(config);
    }
    
    public CookiesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cookies entity) {
        stmt.clearBindings();
 
        String host_key = entity.getHost_key();
        if (host_key != null) {
            stmt.bindString(1, host_key);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        Long expires_utc = entity.getExpires_utc();
        if (expires_utc != null) {
            stmt.bindLong(5, expires_utc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cookies entity) {
        stmt.clearBindings();
 
        String host_key = entity.getHost_key();
        if (host_key != null) {
            stmt.bindString(1, host_key);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(4, path);
        }
 
        Long expires_utc = entity.getExpires_utc();
        if (expires_utc != null) {
            stmt.bindLong(5, expires_utc);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Cookies readEntity(Cursor cursor, int offset) {
        Cookies entity = new Cookies( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // host_key
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // value
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // path
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // expires_utc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cookies entity, int offset) {
        entity.setHost_key(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExpires_utc(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Cookies entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Cookies entity) {
        return null;
    }

    @Override
    public boolean hasKey(Cookies entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
